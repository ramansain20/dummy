https://drive.google.com/drive/folders/1AGqBYAYGByhk3Dq4y_3V0izG8J-O-SwG?usp=sharing

import * as THREE from 'three'
// const shapeVertices = [
//     new THREE.Vector2(0, 0),
//     new THREE.Vector2(6, 0),
//     new THREE.Vector2(6, 1),
//     new THREE.Vector2(1, 1),
//     new THREE.Vector2(1, 7),
//     new THREE.Vector2(3, 7),
//     new THREE.Vector2(3, 8),
//     new THREE.Vector2(1, 8),
//     new THREE.Vector2(1, 10),
//     new THREE.Vector2(0, 10),
//   ];

//   const shape = new THREE.Shape(shapeVertices);

//   const extrudeSettings = {
//     depth: 10,
//     bevelEnabled: false, 
//   };

//   const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);
//   const material = new THREE.MeshBasicMaterial({ color: 0x808080,wireframe:true });
//   const mesh = new THREE.Mesh(geometry, material);
// export default mesh;

export default function createAllWall(coordinates){// coordinates is an array of arrays of coordinates
    let walls=[];
coordinates.forEach((coordinate)=>{
    
    let shapeVertices = [];
    coordinate.forEach((point)=>{
        shapeVertices.push(new THREE.Vector2(point[0],point[1]));
    })
    
      const shape = new THREE.Shape(shapeVertices);
    
      const extrudeSettings = {
        depth: 10,
        bevelEnabled: false, 
      };
    
      const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);
      const material = new THREE.MeshBasicMaterial({ color: 0x808080,wireframe:true });
      const mesh = new THREE.Mesh(geometry, material);
      mesh.position.z=Math.random()*20;
      mesh.position.x=0;
      mesh.position.y=0;
      walls.push(mesh);
})
    return walls;
}





import './style.css'
import * as THREE from 'three'
import createAllWall from './wall.js'
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'
/**
 * Base
 */
// Canvas
const canvas = document.querySelector('canvas.webgl')
const renderer = new THREE.WebGLRenderer({
    canvas: canvas
})
const scene = new THREE.Scene()
const axesHelper = new THREE.AxesHelper( 5 );
scene.add( axesHelper );

const walls = createAllWall([[[0,0],[6,0],[6,1],[1,1],[1,7],[3,7],[3,8],[1,8],[1,10],[0,10]],[[0,0],[5,0],[5,7],[0,7],[0,6],[4,6],[4,1],[0,1]]]);

walls.forEach((wall)=>{
    scene.add(wall);
})
const camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 500 );
camera.position.set( 0, 0, 100 );
camera.lookAt( 0, 0, 0 );
const controls = new OrbitControls( camera,canvas);
scene.add( camera );

renderer.setSize( window.innerWidth, window.innerHeight );


function animate() {

	requestAnimationFrame( animate );
	controls.update();
	renderer.render( scene, camera );

}
animate();
